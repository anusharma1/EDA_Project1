# Required packages
require(sqldf)
require(data.table)
# setting the current working directory
setwd("D:/Training/Coursera/Data cleansing project for week 4")
#Reading Train DataSets
SubjectTrain      <- read.table("train/subject_train.txt")
ActivityTrain     <- read.table("train/Y_train.txt")
ObservationsTrain <- read.table("train/X_train.txt")
# Read required reference tables
Feature <- read.table("features.txt")
ActivityLabel <- data.table(read.table("activity_labels.txt"))
names(ActivityLabel) <- c("ActivityL", "ActivityDescription")
#compile Train DataSet
names(ObservationsTrain)<- Feature$V2
names(SubjectTrain) <- "Subject"
names(ActivityTrain) <- "Activity"
TrainDataSet <- cbind(SubjectTrain,ActivityTrain,ObservationsTrain )
#Read Test Data
SubjectTest <- read.table("test/subject_test.txt")
ActivityTest <- read.table("test/Y_test.txt")
ObservationsTest <- read.table("test/X_test.txt")
## Combine TrainDataSet and TestDataSet to a single CompleteDataSet
CompleteDataSet <- rbind(TrainDataSet, TestDataSet)
TidyDataSet <- CompleteDataSet[, c("Subject","Activity",grep("std",names(CompleteDataSet),value = TRUE, fixed = TRUE),grep("mean()", names(CompleteDataSet),value = TRUE, fixed =TRUE))]
## Finding the mean and standarddeviation columnnames
grep("std",names(CompleteDataSet),value = TRUE, fixed = TRUE)
grep("mean()", names(CompleteDataSet),value = TRUE, fixed =TRUE)
##Joining Two tables (TidyDataSet and ActivityLabel)
TidyDataSet <- sqldf(" select * from TidyDataSet inner join ActivityLabel on TidydataSet.Activity = ActivityLabel.ActivityL")
TidyDataSet <- TidyDataSet[, c(-2, -69)]
# Trial --Summarizing TidyDataSet By Subject and Activity
MeanSD<-TidyDataSet[,lapply(.SD,mean), by=c("Subject","ActivityDescription")]
TidyDataSet[, c(mean = lapply(.SD, mean), sd = lapply(.SD, sd))]
##Removing "-,()" from the columnenames
names(TidyDataSet)<- gsub("[-()]","", names(TidyDataSet))
paste("Avg(", names(TidyDataSet), ")",sep="")
IndependentDataSet <- sqldf("Select Subject, ActivityDescription,
Avg(tBodyAccstdX),
Avg(tBodyAccstdY),
Avg(tBodyAccstdZ),
Avg(tGravityAccstdX),
Avg(tGravityAccstdY),
Avg(tGravityAccstdZ),
Avg(tBodyAccJerkstdX),
Avg(tBodyAccJerkstdY),
Avg(tBodyAccJerkstdZ),
Avg(tBodyGyrostdX)",
Avg(tBodyGyrostdY),
Avg(tBodyGyrostdZ),
Avg(tBodyGyroJerkstdX),
Avg(tBodyGyroJerkstdY),
Avg(tBodyGyroJerkstdZ),
Avg(tBodyAccMagstd),
Avg(tGravityAccMagstd),
Avg(tBodyAccJerkMagstd),
Avg(tBodyGyroMagstd),
Avg(tBodyGyroJerkMagstd),
Avg(fBodyAccstdX),
Avg(fBodyAccstdY),
Avg(fBodyAccstdZ),
Avg(fBodyAccJerkstdX),
Avg(fBodyAccJerkstdY),
Avg(fBodyAccJerkstdZ),
Avg(fBodyGyrostdX),
Avg(fBodyGyrostdY),
Avg(fBodyGyrostdZ),
Avg(fBodyAccMagstd),
Avg(fBodyBodyAccJerkMagstd),
Avg(fBodyBodyGyroMagstd),
Avg(fBodyBodyGyroJerkMagstd),
Avg(tBodyAccmeanX),
Avg(tBodyAccmeanY),
Avg(tBodyAccmeanZ),
Avg(tGravityAccmeanX),
Avg(tGravityAccmeanY),
Avg(tGravityAccmeanZ),
Avg(tBodyAccJerkmeanX),
Avg(tBodyAccJerkmeanY),
Avg(tBodyAccJerkmeanZ),
Avg(tBodyGyromeanX),
Avg(tBodyGyromeanY),
Avg(tBodyGyromeanZ),
Avg(tBodyGyroJerkmeanX),
Avg(tBodyGyroJerkmeanY),
Avg(tBodyGyroJerkmeanZ),
Avg(tBodyAccMagmean),
Avg(tGravityAccMagmean),
Avg(tBodyAccJerkMagmean),
Avg(tBodyGyroMagmean),
Avg(tBodyGyroJerkMagmean),
Avg(fBodyAccmeanX),
Avg(fBodyAccmeanY),
Avg(fBodyAccmeanZ),
Avg(fBodyAccJerkmeanX),
Avg(fBodyAccJerkmeanY),
Avg(fBodyAccJerkmeanZ),
Avg(fBodyGyromeanX),
Avg(fBodyGyromeanY),
Avg(fBodyGyromeanZ),
Avg(fBodyAccMagmean),
Avg(fBodyBodyAccJerkMagmean),
Avg(fBodyBodyGyroMagmean),
Avg(fBodyBodyGyroJerkMagmean),
Avg(ActivityDescription)
from TidyDataSet
group by Subject, ActivityDescription")
# Required packages
require(sqldf)
require(data.table)
# setting the current working directory
setwd("D:/Training/Coursera/Data cleansing project for week 4")
#Reading Train DataSets
SubjectTrain      <- read.table("train/subject_train.txt")
ActivityTrain     <- read.table("train/Y_train.txt")
ObservationsTrain <- read.table("train/X_train.txt")
# Read required reference tables
Feature <- read.table("features.txt")
ActivityLabel <- data.table(read.table("activity_labels.txt"))
names(ActivityLabel) <- c("ActivityL", "ActivityDescription")
#compile Train DataSet
names(ObservationsTrain)<- Feature$V2
names(SubjectTrain) <- "Subject"
names(ActivityTrain) <- "Activity"
TrainDataSet <- cbind(SubjectTrain,ActivityTrain,ObservationsTrain )
#Read Test Data
SubjectTest <- read.table("test/subject_test.txt")
ActivityTest <- read.table("test/Y_test.txt")
ObservationsTest <- read.table("test/X_test.txt")
## Combine TrainDataSet and TestDataSet to a single CompleteDataSet
CompleteDataSet <- rbind(TrainDataSet, TestDataSet)
TidyDataSet <- CompleteDataSet[, c("Subject","Activity",grep("std",names(CompleteDataSet),value = TRUE, fixed = TRUE),grep("mean()", names(CompleteDataSet),value = TRUE, fixed =TRUE))]
## Finding the mean and standarddeviation columnnames
grep("std",names(CompleteDataSet),value = TRUE, fixed = TRUE)
grep("mean()", names(CompleteDataSet),value = TRUE, fixed =TRUE)
##Joining Two tables (TidyDataSet and ActivityLabel)
TidyDataSet <- sqldf(" select * from TidyDataSet inner join ActivityLabel on TidydataSet.Activity = ActivityLabel.ActivityL")
TidyDataSet <- TidyDataSet[, c(-2, -69)]
# Trial --Summarizing TidyDataSet By Subject and Activity
MeanSD<-TidyDataSet[,lapply(.SD,mean), by=c("Subject","ActivityDescription")]
TidyDataSet[, c(mean = lapply(.SD, mean), sd = lapply(.SD, sd))]
##Removing "-,()" from the columnenames
names(TidyDataSet)<- gsub("[-()]","", names(TidyDataSet))
paste("Avg(", names(TidyDataSet), ")",sep="")
IndependentDataSet <- sqldf("Select Subject, ActivityDescription,
Avg(tBodyAccstdX),
Avg(tBodyAccstdY),
Avg(tBodyAccstdZ),
Avg(tGravityAccstdX),
Avg(tGravityAccstdY),
Avg(tGravityAccstdZ),
Avg(tBodyAccJerkstdX),
Avg(tBodyAccJerkstdY),
Avg(tBodyAccJerkstdZ),
Avg(tBodyGyrostdX)",
Avg(tBodyGyrostdY),
Avg(tBodyGyrostdZ),
Avg(tBodyGyroJerkstdX),
Avg(tBodyGyroJerkstdY),
Avg(tBodyGyroJerkstdZ),
Avg(tBodyAccMagstd),
Avg(tGravityAccMagstd),
Avg(tBodyAccJerkMagstd),
Avg(tBodyGyroMagstd),
Avg(tBodyGyroJerkMagstd),
Avg(fBodyAccstdX),
Avg(fBodyAccstdY),
Avg(fBodyAccstdZ),
Avg(fBodyAccJerkstdX),
Avg(fBodyAccJerkstdY),
Avg(fBodyAccJerkstdZ),
Avg(fBodyGyrostdX),
Avg(fBodyGyrostdY),
Avg(fBodyGyrostdZ),
Avg(fBodyAccMagstd),
Avg(fBodyBodyAccJerkMagstd),
Avg(fBodyBodyGyroMagstd),
Avg(fBodyBodyGyroJerkMagstd),
Avg(tBodyAccmeanX),
Avg(tBodyAccmeanY),
Avg(tBodyAccmeanZ),
Avg(tGravityAccmeanX),
Avg(tGravityAccmeanY),
Avg(tGravityAccmeanZ),
Avg(tBodyAccJerkmeanX),
Avg(tBodyAccJerkmeanY),
Avg(tBodyAccJerkmeanZ),
Avg(tBodyGyromeanX),
Avg(tBodyGyromeanY),
Avg(tBodyGyromeanZ),
Avg(tBodyGyroJerkmeanX),
Avg(tBodyGyroJerkmeanY),
Avg(tBodyGyroJerkmeanZ),
Avg(tBodyAccMagmean),
Avg(tGravityAccMagmean),
Avg(tBodyAccJerkMagmean),
Avg(tBodyGyroMagmean),
Avg(tBodyGyroJerkMagmean),
Avg(fBodyAccmeanX),
Avg(fBodyAccmeanY),
Avg(fBodyAccmeanZ),
Avg(fBodyAccJerkmeanX),
Avg(fBodyAccJerkmeanY),
Avg(fBodyAccJerkmeanZ),
Avg(fBodyGyromeanX),
Avg(fBodyGyromeanY),
Avg(fBodyGyromeanZ),
Avg(fBodyAccMagmean),
Avg(fBodyBodyAccJerkMagmean),
Avg(fBodyBodyGyroMagmean),
Avg(fBodyBodyGyroJerkMagmean),
Avg(ActivityDescription)
from TidyDataSet
group by Subject, ActivityDescription")
library(sqldf)
# Required packages
require(sqldf)
require(data.table)
# setting the current working directory
setwd("D:/Training/Coursera/Data cleansing project for week 4")
#Reading Train DataSets
SubjectTrain      <- read.table("train/subject_train.txt")
ActivityTrain     <- read.table("train/Y_train.txt")
ObservationsTrain <- read.table("train/X_train.txt")
# Read required reference tables
Feature <- read.table("features.txt")
ActivityLabel <- data.table(read.table("activity_labels.txt"))
names(ActivityLabel) <- c("ActivityL", "ActivityDescription")
#compile Train DataSet
names(ObservationsTrain)<- Feature$V2
names(SubjectTrain) <- "Subject"
names(ActivityTrain) <- "Activity"
TrainDataSet <- cbind(SubjectTrain,ActivityTrain,ObservationsTrain )
#Read Test Data
SubjectTest <- read.table("test/subject_test.txt")
ActivityTest <- read.table("test/Y_test.txt")
ObservationsTest <- read.table("test/X_test.txt")
## Combine TrainDataSet and TestDataSet to a single CompleteDataSet
CompleteDataSet <- rbind(TrainDataSet, TestDataSet)
TidyDataSet <- CompleteDataSet[, c("Subject","Activity",grep("std",names(CompleteDataSet),value = TRUE, fixed = TRUE),grep("mean()", names(CompleteDataSet),value = TRUE, fixed =TRUE))]
## Finding the mean and standarddeviation columnnames
grep("std",names(CompleteDataSet),value = TRUE, fixed = TRUE)
grep("mean()", names(CompleteDataSet),value = TRUE, fixed =TRUE)
##Joining Two tables (TidyDataSet and ActivityLabel)
TidyDataSet <- sqldf(" select * from TidyDataSet inner join ActivityLabel on TidydataSet.Activity = ActivityLabel.ActivityL")
TidyDataSet <- TidyDataSet[, c(-2, -69)]
# Trial --Summarizing TidyDataSet By Subject and Activity
MeanSD<-TidyDataSet[,lapply(.SD,mean), by=c("Subject","ActivityDescription")]
TidyDataSet[, c(mean = lapply(.SD, mean), sd = lapply(.SD, sd))]
##Removing "-,()" from the columnenames
names(TidyDataSet)<- gsub("[-()]","", names(TidyDataSet))
paste("Avg(", names(TidyDataSet), ")",sep="")
IndependentDataSet <- sqldf("Select Subject, ActivityDescription,
Avg(tBodyAccstdX),
Avg(tBodyAccstdY),
Avg(tBodyAccstdZ),
Avg(tGravityAccstdX),
Avg(tGravityAccstdY),
Avg(tGravityAccstdZ),
Avg(tBodyAccJerkstdX),
Avg(tBodyAccJerkstdY),
Avg(tBodyAccJerkstdZ),
Avg(tBodyGyrostdX)",
Avg(tBodyGyrostdY),
Avg(tBodyGyrostdZ),
Avg(tBodyGyroJerkstdX),
Avg(tBodyGyroJerkstdY),
Avg(tBodyGyroJerkstdZ),
Avg(tBodyAccMagstd),
Avg(tGravityAccMagstd),
Avg(tBodyAccJerkMagstd),
Avg(tBodyGyroMagstd),
Avg(tBodyGyroJerkMagstd),
Avg(fBodyAccstdX),
Avg(fBodyAccstdY),
Avg(fBodyAccstdZ),
Avg(fBodyAccJerkstdX),
Avg(fBodyAccJerkstdY),
Avg(fBodyAccJerkstdZ),
Avg(fBodyGyrostdX),
Avg(fBodyGyrostdY),
Avg(fBodyGyrostdZ),
Avg(fBodyAccMagstd),
Avg(fBodyBodyAccJerkMagstd),
Avg(fBodyBodyGyroMagstd),
Avg(fBodyBodyGyroJerkMagstd),
Avg(tBodyAccmeanX),
Avg(tBodyAccmeanY),
Avg(tBodyAccmeanZ),
Avg(tGravityAccmeanX),
Avg(tGravityAccmeanY),
Avg(tGravityAccmeanZ),
Avg(tBodyAccJerkmeanX),
Avg(tBodyAccJerkmeanY),
Avg(tBodyAccJerkmeanZ),
Avg(tBodyGyromeanX),
Avg(tBodyGyromeanY),
Avg(tBodyGyromeanZ),
Avg(tBodyGyroJerkmeanX),
Avg(tBodyGyroJerkmeanY),
Avg(tBodyGyroJerkmeanZ),
Avg(tBodyAccMagmean),
Avg(tGravityAccMagmean),
Avg(tBodyAccJerkMagmean),
Avg(tBodyGyroMagmean),
Avg(tBodyGyroJerkMagmean),
Avg(fBodyAccmeanX),
Avg(fBodyAccmeanY),
Avg(fBodyAccmeanZ),
Avg(fBodyAccJerkmeanX),
Avg(fBodyAccJerkmeanY),
Avg(fBodyAccJerkmeanZ),
Avg(fBodyGyromeanX),
Avg(fBodyGyromeanY),
Avg(fBodyGyromeanZ),
Avg(fBodyAccMagmean),
Avg(fBodyBodyAccJerkMagmean),
Avg(fBodyBodyGyroMagmean),
Avg(fBodyBodyGyroJerkMagmean),
Avg(ActivityDescription)
from TidyDataSet
group by Subject, ActivityDescription")
write.table(IndependentDataSet, file="TidyDataSet.txt")
setwd("C:/Users/hello/Desktop/EDACoursera")
dataFile <- "household_power_consumption.txt"
data <- read.table(dataFile, header=TRUE, sep=";", stringsAsFactors=FALSE, dec=".")
subSetData <- data[data$Date %in% c("1/2/2007","2/2/2007") ,]
datetime <- strptime(paste(subSetData$Date, subSetData$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
globalActivePower <- as.numeric(subSetData$Global_active_power)
globalReactivePower <- as.numeric(subSetData$Global_reactive_power)
voltage <- as.numeric(subSetData$Voltage)
subMetering1 <- as.numeric(subSetData$Sub_metering_1)
subMetering2 <- as.numeric(subSetData$Sub_metering_2)
subMetering3 <- as.numeric(subSetData$Sub_metering_3)
png("plot4.png", width=480, height=480)
par(mfrow = c(2, 2))
##setting the current working directory
setwd("C:/Users/hello/Desktop/EDACoursera")
dataFile <- "household_power_consumption.txt"
data <- read.table(dataFile, header=TRUE, sep=";", stringsAsFactors=FALSE, dec=".")
subSetData <- data[data$Date %in% c("1/2/2007","2/2/2007") ,]
#str(subSetData)
globalActivePower <- as.numeric(subSetData$Global_active_power)
png("plot1.png", width=480, height=480)
hist(globalActivePower, col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)")
datetime <- strptime(paste(subSetData$Date, subSetData$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
globalActivePower <- as.numeric(subSetData$Global_active_power)
png("plot2.png", width=480, height=480)
plot(datetime, globalActivePower, type="l", xlab="", ylab="Global Active Power (kilowatts)")
dev.off()
op <- par(mfrow = c(2, 2))
hist(islands)
utils::str(hist(islands, col = "gray", labels = TRUE))
hist(sqrt(islands), breaks = 12, col = "lightblue", border = "pink")
##-- For non-equidistant breaks, counts should NOT be graphed unscaled:
r <- hist(sqrt(islands), breaks = c(4*0:5, 10*3:5, 70, 100, 140),
col = "blue1")
text(r$mids, r$density, r$counts, adj = c(.5, -.5), col = "blue3")
sapply(r[2:3], sum)
sum(r$density * diff(r$breaks)) # == 1
lines(r, lty = 3, border = "purple") # -> lines.histogram(*)
par(op)
require(utils) # for str
str(hist(islands, breaks = 12, plot =  FALSE)) #-> 10 (~= 12) breaks
str(hist(islands, breaks = c(12,20,36,80,200,1000,17000), plot = FALSE))
hist(islands, breaks = c(12,20,36,80,200,1000,17000), freq = TRUE,
main = "WRONG histogram") # and warning
require(stats)
set.seed(14)
x <- rchisq(100, df = 4)
##setting the current working directory
setwd('C:/Users/hello/Desktop/EDACoursera')
dataFile <- "household_power_consumption.txt"
data <- read.table(dataFile, header=TRUE, sep=";", stringsAsFactors=FALSE, dec=".")
subSetData <- data[data$Date %in% c("1/2/2007","2/2/2007") ,]
#str(subSetData)
globalActivePower <- as.numeric(subSetData$Global_active_power)
png("plot1.png", width=480, height=480)
hist(globalActivePower, col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)")
datetime <- strptime(paste(subSetData$Date, subSetData$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
globalActivePower <- as.numeric(subSetData$Global_active_power)
png("plot2.png", width=480, height=480)
plot(datetime, globalActivePower, type="l", xlab="", ylab="Global Active Power (kilowatts)")
dev.off()
##setting the current working directory
setwd("C:/Users/hello/Desktop/EDACoursera")
dataFile <- "household_power_consumption.txt"
data <- read.table(dataFile, header=TRUE, sep=";", stringsAsFactors=FALSE, dec=".")
subSetData <- data[data$Date %in% c("1/2/2007","2/2/2007") ,]
datetime <- strptime(paste(subSetData$Date, subSetData$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
globalActivePower <- as.numeric(subSetData$Global_active_power)
png("plot10.png", width=480, height=480)
plot(datetime, globalActivePower, type="l", xlab="", ylab="Global Active Power (kilowatts)")
dev.off()
##setting the current working directory
setwd("C:/Users/hello/Desktop/EDACoursera")
dataFile <- "household_power_consumption.txt"
data <- read.table(dataFile, header=TRUE, sep=";", stringsAsFactors=FALSE, dec=".")
subSetData <- data[data$Date %in% c("1/2/2007","/3/2007") ,]
datetime <- strptime(paste(subSetData$Date, subSetData$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
globalActivePower <- as.numeric(subSetData$Global_active_power)
png("plot11.png", width=480, height=480)
plot(datetime, globalActivePower, type="l", xlab="", ylab="Global Active Power (kilowatts)")
dev.off()
setwd("C:/Users/hello/Desktop/EDACoursera")
dataFile <- "household_power_consumption.txt"
data <- read.table(dataFile, header=TRUE, sep=";", stringsAsFactors=FALSE, dec=".")
subSetData <- data[data$Date %in% c("1/2/2007","2/2/2007") ,]
datetime <- strptime(paste(subSetData$Date, subSetData$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
globalActivePower <- as.numeric(subSetData$Global_active_power)
globalReactivePower <- as.numeric(subSetData$Global_reactive_power)
voltage <- as.numeric(subSetData$Voltage)
subMetering1 <- as.numeric(subSetData$Sub_metering_1)
subMetering2 <- as.numeric(subSetData$Sub_metering_2)
subMetering3 <- as.numeric(subSetData$Sub_metering_3)
png("plot4.png", width=480, height=480)
par(mfrow = c(2, 2))
plot(datetime, globalActivePower, type="l", xlab="", ylab="Global Active Power", cex=0.2)
plot(datetime, voltage, type="l", xlab="datetime", ylab="Voltage")
plot(datetime, subMetering1, type="l", ylab="Energy Submetering", xlab="")
lines(datetime, subMetering2, type="l", col="red")
lines(datetime, subMetering3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=, lwd=2.5, col=c("black", "red", "blue"), bty="o")
plot(datetime, globalReactivePower, type="l", xlab="datetime", ylab="Global_reactive_power")
dev.off()
setwd("C:/Users/hello/Desktop/EDACoursera")
## Getting full dataset
setwd("C:/Users/hello/Desktop/EDACoursera")
data_full <- read.csv("household_power_consumption.txt", header=T, sep=';', na.strings="?",
nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data_full$Date <- as.Date(data_full$Date, format="%d/%m/%Y")
## Subsetting the data
data <- subset(data_full, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
rm(data_full)
## Converting dates
datetime <- paste(as.Date(data$Date), data$Time)
data$Datetime <- as.POSIXct(datetime)
## Plot 1
hist(data$Global_active_power, main="Global Active Power",
xlab="Global Active Power (kilowatts)", ylab="Frequency", col="Red")
## Saving to file
dev.copy(png, file="plot1.png", height=480, width=480)
dev.off()
## Getting full dataset
setwd("C:/Users/hello/Desktop/EDACoursera")
data_full <- read.csv("household_power_consumption.txt", header=T, sep=';', na.strings="?",
nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data_full$Date <- as.Date(data_full$Date, format="%d/%m/%Y")
## Subsetting the data
data <- subset(data_full, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
rm(data_full)
## Converting dates
datetime <- paste(as.Date(data$Date), data$Time)
data$Datetime <- as.POSIXct(datetime)
## Plot 2
plot(data$Global_active_power~data$Datetime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
dev.copy(png, file="plot2.png", height=480, width=480)
dev.off()
## Getting full dataset
setwd("C:/Users/hello/Desktop/EDACoursera")
data_full <- read.csv("household_power_consumption.txt", header=T, sep=';', na.strings="?",
nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data_full$Date <- as.Date(data_full$Date, format="%d/%m/%Y")
## Subsetting the data
data <- subset(data_full, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
rm(data_full)
## Converting dates
datetime <- paste(as.Date(data$Date), data$Time)
data$Datetime <- as.POSIXct(datetime)
## Plot 3
with(data, {
plot(Sub_metering_1~Datetime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
lines(Sub_metering_2~Datetime,col='Red')
lines(Sub_metering_3~Datetime,col='Blue')
})
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
## Saving to file
dev.copy(png, file="plot3.png", height=480, width=480)
dev.off()
## Getting full dataset
setwd("C:/Users/hello/Desktop/EDACoursera")
data_full <- read.csv("household_power_consumption.txt", header=T, sep=';', na.strings="?",
nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data_full$Date <- as.Date(data_full$Date, format="%d/%m/%Y")
## Subsetting the data
data <- subset(data_full, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
rm(data_full)
## Converting dates
datetime <- paste(as.Date(data$Date), data$Time)
data$Datetime <- as.POSIXct(datetime)
## Plot 4
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
with(data, {
plot(Global_active_power~Datetime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
plot(Voltage~Datetime, type="l",
ylab="Voltage (volt)", xlab="")
plot(Sub_metering_1~Datetime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
lines(Sub_metering_2~Datetime,col='Red')
lines(Sub_metering_3~Datetime,col='Blue')
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, bty="n",
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(Global_reactive_power~Datetime, type="l",
ylab="Global Rective Power (kilowatts)",xlab="")
})
## Saving to file
dev.copy(png, file="plot4.png", height=480, width=480)
dev.off()
